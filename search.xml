<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>dfs and bfs</title>
    <url>/2020/12/24/dfs-and-bfs/</url>
    <content><![CDATA[<h2 id="广度搜索和深度搜索的简单使用"><a href="#广度搜索和深度搜索的简单使用" class="headerlink" title="广度搜索和深度搜索的简单使用"></a>广度搜索和深度搜索的简单使用</h2><p>小编我也是一个星期前才学的延迟搜索，当时学习的时候也是十分懵逼啊。<br>但是随着我深入的学习，终于是看出了一点的门道。<br>简单来说<br><strong>dfs就是递归，bfs就是排队</strong><br>接下来我会以题目和代码的形式来解释。</p>
<p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。<br>        Input<br>       输入含有多组测试数据。 </p>
<p>每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n </p>
<p>当为-1 -1时表示输入结束。 </p>
<p>随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。<br>        Output<br>       对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。<br>        Sample Input<br>        2 1<br>        #.<br>        .#<br>        4 4<br>        …#<br>        ..#.<br>        .#..<br>        #…<br>       -1 -1<br>        Sample Output<br>        2<br>        1</p>
<p>这道题就是dfs非常经典的棋盘问题了，当然它在八皇后问题的基础上还加了一些限制条件。<br>主要思路先提前将棋盘存入数组中，然后对每行进行遍历，遍历的过程中要注意将已经放下的棋子那一列进行标记，这样在之后的遍历中这一列就不能放旗子了。另外这题与八皇后问题最大的不同在于它给定了棋子的数目但并没有要求每行都有棋子，因此在递归的过程中要以棋子的数目当做递归的条件。下面附上代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int arr&#x3D;0;</span><br><span class="line">char maze[8][8];&#x2F;&#x2F;定义棋盘</span><br><span class="line">int used[8];&#x2F;&#x2F;标记列</span><br><span class="line">int n;</span><br><span class="line">void f(int h,int k)&#x2F;&#x2F;dfs</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    if(k&#x3D;&#x3D;0)&#x2F;&#x2F;当棋子摆完，结束遍历</span><br><span class="line">    &#123;</span><br><span class="line">        arr++;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(h&gt;&#x3D;n)</span><br><span class="line">        return;&#x2F;&#x2F;如果行数超过棋盘行数返回</span><br><span class="line">    for(i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(used[i]&#x3D;&#x3D;0&amp;&amp;maze[h][i]&#x3D;&#x3D;&#39;#&#39;)&#x2F;&#x2F;遍历</span><br><span class="line">        &#123;</span><br><span class="line">            used[i]&#x3D;1;&#x2F;&#x2F;将这一列标记</span><br><span class="line">            f(h+1,k-1);&#x2F;&#x2F;对下一行进行遍历</span><br><span class="line">            used[i]&#x3D;0;&#x2F;&#x2F;取消标记</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        f(h+1,k);&#x2F;&#x2F;无论这一行有没有摆放，都开始下一行的遍历</span><br><span class="line">&#125;</span><br><span class="line">int main (void)</span><br><span class="line">&#123;</span><br><span class="line">    int k,i,j;</span><br><span class="line">    while(~scanf(&quot;%d %d&quot;,&amp;n,&amp;k)&amp;&amp;(n!&#x3D;-1&amp;&amp;k!&#x3D;-1))</span><br><span class="line">    &#123;</span><br><span class="line">        memset(maze,0,sizeof(maze));&#x2F;&#x2F;清空数组</span><br><span class="line">        memset(used,0,sizeof(used));</span><br><span class="line">        arr&#x3D;0;</span><br><span class="line">        getchar();</span><br><span class="line">        for(i&#x3D;0;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(j&#x3D;0;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%c&quot;,&amp;maze[i][j]);&#x2F;&#x2F;定义棋盘</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        f(0,k);</span><br><span class="line">        printf(&quot;%d\n&quot;,arr);&#x2F;&#x2F;输出个数</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>看到这里想必你对dfs已经有一定了解了，然而dfs的缺点也是显而易见的，这就是一个一条路走到黑的方法，在寻找最优解上并不太适用，所以bfs就很好的解决了这个问题。</strong><br>接下来我们还是以题目和代码的形式说明。<br>     Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N ( 0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of  transportation: walking and teleporting.<br>    * Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute<br>    * Teleporting: FJ can move from any point X to the point 2 × X in a single minute.<br>    If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?<br>        Input<br>       Line 1: Two space-separated integers:<br>       N and  K<br>        Output<br>       Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.<br>     Sample Input<br>        5 17<br>        Sample Output<br>        4<br>        Hint<br>       The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.</p>
<p>这道题是英文形式，大致的意思就你站在N坐标要去抓一个坐标在K的牛，而你每分钟的行动有三种选择，从X的地方到X+1，X-1或2*X，假设这头牛不会动，问你最快抓到牛的时间。<br><strong>这道题如果用dfs也可以解决，但一是不太容易找到最优解，二是复杂度太高了</strong><br>所以这题我们用bfs解决，之前已经说明了，bfs说白了就是排队，将每一步的所有可能性放入队列中，再往后推，直到到达目标为止。<br>所以这题的思路也非常明确：<br>将每一分钟所做的所有行动排入队列中，直到抓到牛为止，接下来附上代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">struct note&#x2F;&#x2F;定义坐标和步数</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int s;</span><br><span class="line">&#125;;</span><br><span class="line">int main (void)</span><br><span class="line">&#123;</span><br><span class="line">    int x1,x2,tx;</span><br><span class="line">    int head,tail;&#x2F;&#x2F;定义头和尾</span><br><span class="line">    int i;</span><br><span class="line">    int used[100005];</span><br><span class="line">    int flag&#x3D;0;</span><br><span class="line">    int sum&#x3D;0;</span><br><span class="line">    struct note que[100005];&#x2F;&#x2F;定义队列</span><br><span class="line">    memset(used,0,sizeof(used));</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;x1,&amp;x2);</span><br><span class="line">    head&#x3D;1;&#x2F;&#x2F;将队首队尾都设置为1</span><br><span class="line">    tail&#x3D;1;</span><br><span class="line">    que[head].x&#x3D;x1;&#x2F;&#x2F;将初始坐标存入队首</span><br><span class="line">    que[head].s&#x3D;0;&#x2F;&#x2F;将步数定为0</span><br><span class="line">    tail++;&#x2F;&#x2F;队尾向后推</span><br><span class="line">    while(head&lt;tail)</span><br><span class="line">    &#123;</span><br><span class="line">        if(que[head].x&#x3D;&#x3D;x2)&#x2F;&#x2F;当到达目标点，停止排队</span><br><span class="line">            break;</span><br><span class="line">        for(i&#x3D;1; i&lt;&#x3D;3; i++)&#x2F;&#x2F;分别列出三种可能的行动方式</span><br><span class="line">        &#123;</span><br><span class="line">            if(i&#x3D;&#x3D;1)</span><br><span class="line">                tx&#x3D;que[head].x+1;</span><br><span class="line">            else if(i&#x3D;&#x3D;2)</span><br><span class="line">                tx&#x3D;que[head].x-1;</span><br><span class="line">            else</span><br><span class="line">                tx&#x3D;que[head].x*2;</span><br><span class="line">            if(tx&lt;0||tx&gt;100000)&#x2F;&#x2F;走出所给定范围则不存入队列</span><br><span class="line">                continue;</span><br><span class="line">            if(used[tx]&#x3D;&#x3D;0)</span><br><span class="line">            &#123;</span><br><span class="line">                used[tx]&#x3D;1;&#x2F;&#x2F;对走过的点进行标记，避免重复</span><br><span class="line">                que[tail].x&#x3D;tx;&#x2F;&#x2F;将可能的坐标存入队尾</span><br><span class="line">                que[tail].s&#x3D;que[head].s+1;&#x2F;&#x2F;步数是队首所存的步数+1</span><br><span class="line">                tail++;队尾后推</span><br><span class="line">            &#125;</span><br><span class="line">            if(tx&#x3D;&#x3D;x2)&#x2F;&#x2F;到达目标，退出循环</span><br><span class="line">            &#123;</span><br><span class="line">                flag&#x3D;1;&#x2F;&#x2F;利用flag退出两层循环</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if(flag&#x3D;&#x3D;1)</span><br><span class="line">            break;</span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,que[tail-1].s);&#x2F;&#x2F;由于最后队尾又后推一格，所以应该是队尾的前一格的步数。</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是对深度搜索和广度搜索的简单讲解，学的时间并不长，如有不足，欢迎指正。</p>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vim学习(一)</title>
    <url>/2020/12/25/vim%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="基础保存插入操作"><a href="#基础保存插入操作" class="headerlink" title="基础保存插入操作"></a>基础保存插入操作</h4><p><code>vim</code> ：进入vim，默认为normal默示</p>
<p>normal模式下：</p>
<p><code>i</code> ：插入模式</p>
<p><code>:wq</code> ：保存并退出</p>
<p><code>[range]s/&#123;string1&#125;/&#123;string2&#125;/[flags]</code>：替换，range为范围，%表示全部，string1为被替代的字符串，string2为替代的字符串，flags表示标志，如果是全局则用g。</p>
<p>例：%s/int/long long/u 表示用long long替代全部的int</p>
<p><strong>返回键</strong>退出插入模式</p>
<p>ctr+z：强制退出normal</p>
<h4 id="编译一个c-程序"><a href="#编译一个c-程序" class="headerlink" title="编译一个c++程序"></a>编译一个c++程序</h4><p><code>vim x.cpp</code>  创建一个cpp文件</p>
<p><code>g++ x.vpp</code>  编译该文件</p>
<p><code>./a.out</code>  运行 </p>
<h4 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h4><p><code>cd /etc/vim</code> </p>
<p><code>sudo vim vimrc</code>  </p>
<p>直接在后面编辑保存退出即可。</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>wmh vim笔记</title>
    <url>/2020/12/25/wmh-vim%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<figure class="highlight plain"><figcaption><span>i,a,o</span></figcaption><table><tr><td class="code"><pre><span class="line">编辑模式-&gt;命令模式   esc</span><br><span class="line">命令模式-&gt;末行模式   :</span><br><span class="line">末行模式-&gt;命令模式   esc</span><br><span class="line">vim命令:</span><br><span class="line">    yy:复制</span><br><span class="line">    4yy:光标所在行开始向下复制的4行</span><br><span class="line">    p:粘贴</span><br><span class="line">    dd:剪切光标所在一行</span><br><span class="line">    2dd:光标所在行开始向下剪切2行</span><br><span class="line">    D:从当前的光标位置开始剪切到行末</span><br><span class="line">    d0:从当前光标开始剪切到行首</span><br><span class="line">    x:删除当前的光标后面的那个</span><br><span class="line">    X:删除当前光标前面的那个 </span><br></pre></td></tr></table></figure>




<pre><code>H:当前屏幕的上方
M:当前屏幕的中间
L:当前屏幕的下方
ctrl+f:向下翻一页
ctrl+b:向上翻一页
ctrl+u:向上翻半页
ctrl+d:向下翻半页


20G:快速定位到第20行
G:快速回到整个代码的最后一行
gg:快速回到整个代码的第一行

w:向后跳一个单词的长度，即跳到下一个单词的开始处
b:向前跳一个单词的长度，即跳一个单词的开始处

u:撤销
ctrl+r:反撤销

v:选中一片代码
V：

&gt;&gt;:向右移动
&lt;&lt;:向左移动

.:重复执行上一次的命令

末行模式
wq:保存退出</code></pre>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh配置</title>
    <url>/2020/12/25/zsh%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>找了半天配置文件发现找不到，就直接用vim命令编辑了…</p>
<p><code>vim ~/.zshrc</code> 进入配置文件</p>
<p><code>source ~/.zshrc</code> 不知道干啥的，改完配置都要加一句</p>
<p>配置文件里 <code>ZSH_THEME=</code> 后面加上主题就可更改主题</p>
<p><code>plugins=</code> 后面加上插件名就可启用插件</p>
<p>改完配置不要忘了加<code>source ~/.zshrc</code> </p>
]]></content>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>sam</title>
    <url>/2020/12/24/sam/</url>
    <content><![CDATA[<h2 id="后缀数组小结"><a href="#后缀数组小结" class="headerlink" title="后缀数组小结"></a>后缀数组小结</h2><p>后缀数组也算是拖了好久了，总算是把题单ak了，小结下就得去搞后缀自动机了，争取南京前把字符串都过一遍。</p>
<p>首先，后缀数组算法本身就是对一个字符串的所有后缀进行排序，从而得出两个比较有用的数组，即<strong>sa[i]**和</strong>rak[i]<strong>，其含义如下<br>**sa[i]：排名第i的后缀的首字母所在下标<br>rak[i]：下标为i开头的后缀的排名</strong><br>具体实现方法参考：<a href="https://www.cnblogs.com/zwfymqz/p/8413523.html">后缀数组实现</a><br>通过后缀数组就引申出一个非常重要的数组，即<br><strong>height[i]：排名为i的后缀与其前一名的后缀的最大公共前缀长度</strong><br>具体实现方法和证明也在上面的博客中。<br>通过以上几个数组，我们就可以求一些常见的问题：<br>1.求一个字符串中l下标和r下标开始的后缀的最大公共前缀<br>首先思考，当已知height[2,3],要如何求出排名第一和排名第三的后缀的最大公共前缀？答案是min(height[2],height[3])，具体是为什么可以在图上画画，很简单，那么推广开来，<strong>对于任意下标l和r，要求他们的最大公共前缀，只需算出min(height[rak[l]],height[rak[l]+1]…height[rak[r]])**（假设rak[l]小于rak[r]，如果不是就对换)即可，而快速求出区间中最小值可用</strong>rmq算法<strong>，具体参考：<a href="https://blog.csdn.net/qq_41311604/article/details/79900893">RMQ算法</a><br>2.求多个字符串的公共子串等问题<br>利用第一个问题的解决方法，就可以很轻易地解决一个字符串内的指定后缀的公共前缀，那么如果是求多个字符串的公共子串要怎么做呢。第一反应自然是把这些字符串接起来，再利用问题1的方法求解，但是问题来了，直接拼接后求出的height数组是否是正确的呢？例如：串a为aab，串b为aaba，那么拼接后就成了aabaaba，此时我们求下标1和下标4的公共前缀长度就是4，然而实际上a串的长度只有3，结果算出了长度为4的公共子串显然是错的，所以为了避免这一点，</strong>我们要在a和b中间插入一个没出现过的字符<strong>，比如,aab#aaba，这样在就可以避免上述问题，注意，此字符一定是从没出现过的，然而在实际操作中我们发现要从ascll码中找出一些可见的没出现过的字符是不多的，</strong>所以在一些实际问题中我们可以把字符串全部转换成整形，这样我们中间插入的就可以随便选取些较大的数字了**，毕竟能选的数字显然要远多于字符。</p>
<p>其实做了这么多后缀数组的题也基本逃不开这些，无非是要再加入些二分，dp啥的，接下来上题目。</p>
<p><a href="https://vjudge.net/problem/POJ-1743">Musical Theme</a><br>题意：给定一串数字，要求算出最长的公共子串长度，使其至少出现两次，且不能相交，并且长度至少为5，其中如果一个子串是另一个子串中所有数字加上某个字符，也算是相同子串。<br>思路：首先为了让两个差值为一个常数的子串相等，可以在存储的时候直接存储方差，为了避免负数，再全部加100.然后枚举长度二分，在check的时候只要存在有height大于等于mid，且这个height所代表的两个后缀长度为mid的字符串不相交即满足条件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT() std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">4</span> * <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">int</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N,M,rak[MAX_N],sa[MAX_N],tax[MAX_N],tp[MAX_N];</span><br><span class="line"><span class="keyword">int</span> Height[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*****************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下标&quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sa  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rak &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, rak[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tp  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, tp[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) tax[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) tax[rak[i]]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++) tax[i] += tax[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) sa[tax[rak[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	M=<span class="number">750</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		rak[i]=s[i];</span><br><span class="line">		tp[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	Qsort();</span><br><span class="line">	<span class="comment">//Debug();</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;N;M=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tp[++p]=N-w+i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(sa[i]&gt;w)</span><br><span class="line">			&#123;</span><br><span class="line">				tp[++p]=sa[i]-w;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Qsort();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(tp[i],rak[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		rak[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">            rak[sa[i]] = (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w]) ? p : ++p;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;p&lt;&lt;&#x27; &#x27;&lt;&lt;N&lt;&lt;endl;</span></span><br><span class="line">		<span class="comment">//Debug();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k) k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[rak[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i+k&lt;=N&amp;&amp;j+k&lt;=N&amp;&amp;s[j + k] == s[i + k]) k++;</span><br><span class="line">        Height[rak[i]] = k;</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;, k);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> H[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> mn=sa[<span class="number">1</span>],mx=sa[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(Height[i]&gt;=mid)</span><br><span class="line">		&#123;</span><br><span class="line">			num++;</span><br><span class="line">			mn=min(mn,sa[i]);</span><br><span class="line">			mx=max(mx,sa[i]);</span><br><span class="line">			<span class="keyword">if</span>(mx-mn&gt;mid)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			mn=mx=sa[i];</span><br><span class="line">			num=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			s[i]=s[i]-s[i<span class="number">-1</span>];</span><br><span class="line">			s[i]+=<span class="number">100</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		N=n;</span><br><span class="line">		SuffixSort();</span><br><span class="line">		GetHeight();</span><br><span class="line">		<span class="comment">/*for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			cout&lt;&lt;i&lt;&lt;&quot;-----&quot;&lt;&lt;Height[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		<span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> r=N;</span><br><span class="line">		<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(check(mid))</span><br><span class="line">			&#123;</span><br><span class="line">				l=mid+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				r=mid<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="comment">//cout&lt;&lt;mid&lt;&lt;endl;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(mid&gt;=<span class="number">4</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				mid++;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;mid&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/POJ-3261">Milk Patterns</a><br>题意：给定一串数字，求出现k次的最长子串长度<br>思路：和上一题似乎几乎一样，同样是二分长度，在check的时候只要存在连续k个height的最小值大于等于mid即符合条件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT() std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">4</span> * <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">int</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N,M,rak[MAX_N],sa[MAX_N],tax[MAX_N],tp[MAX_N];</span><br><span class="line"><span class="keyword">int</span> Height[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*****************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下标&quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sa  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rak &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, rak[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tp  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, tp[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) tax[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) tax[rak[i]]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++) tax[i] += tax[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) sa[tax[rak[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	M=<span class="number">75</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		rak[i]=s[i];</span><br><span class="line">		tp[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	Qsort();</span><br><span class="line">	<span class="comment">//Debug();</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;N;M=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tp[++p]=N-w+i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(sa[i]&gt;w)</span><br><span class="line">			&#123;</span><br><span class="line">				tp[++p]=sa[i]-w;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Qsort();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(tp[i],rak[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		rak[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">            rak[sa[i]] = (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w]) ? p : ++p;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;p&lt;&lt;&#x27; &#x27;&lt;&lt;N&lt;&lt;endl;</span></span><br><span class="line">		<span class="comment">//Debug();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k) k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[rak[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i+k&lt;=N&amp;&amp;j+k&lt;=N&amp;&amp;s[i + k] == s[j + k]) k++;</span><br><span class="line">        Height[rak[i]] = k;</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;, k);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> H[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(Height[i]&gt;=mid)</span><br><span class="line">		&#123;</span><br><span class="line">			num++;</span><br><span class="line">			<span class="keyword">if</span>(num&gt;=k)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			num=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	N=n;</span><br><span class="line">	SuffixSort();</span><br><span class="line">	GetHeight();</span><br><span class="line">	<span class="comment">/*for(int i=1;i&lt;=N;i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		H[i]=Height[rak[i]];</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> r=MAX_N;</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">		&#123;</span><br><span class="line">			l=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		    r=mid<span class="number">-1</span>;</span><br><span class="line">		mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;mid&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/SPOJ-DISUBSTR">Distinct Substrings</a><br>题意：给一字符串，找出其中不同子串的数量。<br>思路：首先一个n长度的字符串的子串总数是(1+n)*n/2，然后去掉其中相同的子串个数就是答案了。那么只需要减掉height[1…n]的和就行了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT() std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">4</span> * <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N,M,rak[MAX_N],sa[MAX_N],tax[MAX_N],tp[MAX_N];</span><br><span class="line"><span class="keyword">int</span> Height[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*****************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下标&quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sa  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rak &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, rak[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tp  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, tp[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) tax[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) tax[rak[i]]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++) tax[i] += tax[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) sa[tax[rak[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	M=<span class="number">750</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		rak[i]=s[i];</span><br><span class="line">		tp[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	Qsort();</span><br><span class="line">	<span class="comment">//Debug();</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;N;M=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tp[++p]=N-w+i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(sa[i]&gt;w)</span><br><span class="line">			&#123;</span><br><span class="line">				tp[++p]=sa[i]-w;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Qsort();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(tp[i],rak[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		rak[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">            rak[sa[i]] = (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w]) ? p : ++p;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;p&lt;&lt;&#x27; &#x27;&lt;&lt;N&lt;&lt;endl;</span></span><br><span class="line">		<span class="comment">//Debug();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k) k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[rak[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i+k&lt;=N&amp;&amp;j+k&lt;=N&amp;&amp;s[j + k] == s[i + k]) k++;</span><br><span class="line">        Height[rak[i]] = k;</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;, k);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> H[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> mn=sa[<span class="number">1</span>],mx=sa[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(Height[i]&gt;=mid)</span><br><span class="line">		&#123;</span><br><span class="line">			num++;</span><br><span class="line">			mn=min(mn,sa[i]);</span><br><span class="line">			mx=max(mx,sa[i]);</span><br><span class="line">			<span class="keyword">if</span>(mx-mn&gt;mid)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			mn=mx=sa[i];</span><br><span class="line">			num=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		N=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		SuffixSort();</span><br><span class="line">		GetHeight();</span><br><span class="line">		<span class="keyword">int</span> ans=(N+<span class="number">1</span>)*N/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//cout&lt;&lt;Height[i]&lt;&lt;endl;</span></span><br><span class="line">			ans-=Height[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/SPOJ-SUBST1">New Distinct Substrings</a><br>题意：同上。<br>思路：唯一的区别是数据范围比刚才大了，开long long即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT() std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">4</span> * <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N,M,rak[MAX_N],sa[MAX_N],tax[MAX_N],tp[MAX_N];</span><br><span class="line"><span class="keyword">int</span> Height[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*****************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下标&quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sa  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rak &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, rak[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tp  &quot;</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, tp[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) tax[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) tax[rak[i]]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++) tax[i] += tax[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) sa[tax[rak[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	M=<span class="number">750</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		rak[i]=s[i];</span><br><span class="line">		tp[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	Qsort();</span><br><span class="line">	<span class="comment">//Debug();</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;N;M=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tp[++p]=N-w+i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(sa[i]&gt;w)</span><br><span class="line">			&#123;</span><br><span class="line">				tp[++p]=sa[i]-w;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Qsort();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(tp[i],rak[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		rak[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">            rak[sa[i]] = (tp[sa[i - <span class="number">1</span>]] == tp[sa[i]] &amp;&amp; tp[sa[i - <span class="number">1</span>] + w] == tp[sa[i] + w]) ? p : ++p;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;p&lt;&lt;&#x27; &#x27;&lt;&lt;N&lt;&lt;endl;</span></span><br><span class="line">		<span class="comment">//Debug();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k) k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[rak[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i+k&lt;=N&amp;&amp;j+k&lt;=N&amp;&amp;s[j + k] == s[i + k]) k++;</span><br><span class="line">        Height[rak[i]] = k;</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;, k);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> H[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> mn=sa[<span class="number">1</span>],mx=sa[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(Height[i]&gt;=mid)</span><br><span class="line">		&#123;</span><br><span class="line">			num++;</span><br><span class="line">			mn=min(mn,sa[i]);</span><br><span class="line">			mx=max(mx,sa[i]);</span><br><span class="line">			<span class="keyword">if</span>(mx-mn&gt;mid)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			mn=mx=sa[i];</span><br><span class="line">			num=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		N=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		SuffixSort();</span><br><span class="line">		GetHeight();</span><br><span class="line">		ll ans=(ll)(N+<span class="number">1</span>)*N/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//cout&lt;&lt;Height[i]&lt;&lt;endl;</span></span><br><span class="line">			ans-=(ll)Height[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/SPOJ-REPEATS">Repeats</a><br>题意：给定一个字符串，令k为一子串中连续出现的公共子串个数，求k的最大值。<br>思路：出现了，论文题，直接上论文截图吧<br><img src="https://img-blog.csdnimg.cn/20201127201534187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqeTEyMTEyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以就是枚举长度和起点，然后通过rmq计算区间height最小值求出向后匹配的距离，然后再判断下向前是否能再匹配一个。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT() std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">4</span> * <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N, M, rak[MAX_N], sa[MAX_N], tax[MAX_N], tp[MAX_N];</span><br><span class="line"><span class="keyword">int</span> Height[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) tax[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) tax[rak[i]]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++) tax[i]+=tax[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) sa[tax[rak[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	M = <span class="number">255</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		rak[i] = s[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">		tp[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	Qsort();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; N; M = p, w &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++)</span><br><span class="line">			tp[++p] = N - w + i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">			<span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">				tp[++p] = sa[i] - w;</span><br><span class="line">		Qsort();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(tp[i], rak[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		rak[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			rak[sa[i]]=(tp[sa[i<span class="number">-1</span>]]==tp[sa[i]]&amp;&amp;tp[sa[i<span class="number">-1</span>]+w]==tp[sa[i]+w])?p:++p;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j,k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(k) k--;</span><br><span class="line">		<span class="keyword">int</span> j=sa[rak[i]<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">while</span>(s[i+k]==s[j+k]) k++;</span><br><span class="line">		Height[rak[i]]=k;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N*<span class="number">2</span>][<span class="number">33</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) dp[i][<span class="number">0</span>]=Height[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=N;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ll=rak[l];</span><br><span class="line">	<span class="keyword">int</span> rr=rak[r];</span><br><span class="line">	<span class="keyword">if</span>(ll&gt;=rr)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(ll,rr);</span><br><span class="line">	&#125;</span><br><span class="line">	ll++;</span><br><span class="line">	<span class="keyword">int</span> k=log2(rr-ll+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">	<span class="keyword">return</span> min(dp[ll][k],dp[rr-len+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">char</span> c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+i);</span><br><span class="line">		&#125;</span><br><span class="line">		N=n;</span><br><span class="line">		SuffixSort();</span><br><span class="line">		<span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">		GetHeight();</span><br><span class="line">		<span class="comment">//cout&lt;&lt;2&lt;&lt;endl;</span></span><br><span class="line">		RMQ_init();</span><br><span class="line">		<span class="comment">//cout&lt;&lt;3&lt;&lt;endl;</span></span><br><span class="line">		<span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+i&lt;=n;j+=i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> p=query(j,j+i);</span><br><span class="line">				<span class="keyword">int</span> k=j-(i-p%i);</span><br><span class="line">				<span class="keyword">int</span> ans=p/i+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(k&gt;=<span class="number">0</span>&amp;&amp;query(k,k+i)&gt;=i)</span><br><span class="line">				&#123;</span><br><span class="line">					ans++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">				mx=max(mx,ans);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mx);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/POJ-3693">Maximum repetition substring</a><br>题意：跟上题是一样的，只是要求输出那个子串了，还要求字典序，这个标记 位置，然后用rak数组比较即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT() std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">4</span> * <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N, M, rak[MAX_N], sa[MAX_N], tax[MAX_N], tp[MAX_N];</span><br><span class="line"><span class="keyword">int</span> Height[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) tax[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) tax[rak[i]]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++) tax[i]+=tax[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) sa[tax[rak[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	M = <span class="number">255</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		rak[i] = s[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">		tp[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	Qsort();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; N; M = p, w &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++)</span><br><span class="line">			tp[++p] = N - w + i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">			<span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">				tp[++p] = sa[i] - w;</span><br><span class="line">		Qsort();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(tp[i], rak[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		rak[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			rak[sa[i]]=(tp[sa[i<span class="number">-1</span>]]==tp[sa[i]]&amp;&amp;tp[sa[i<span class="number">-1</span>]+w]==tp[sa[i]+w])?p:++p;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j,k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(k) k--;</span><br><span class="line">		<span class="keyword">int</span> j=sa[rak[i]<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">while</span>(s[i+k]==s[j+k]) k++;</span><br><span class="line">		Height[rak[i]]=k;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N*<span class="number">2</span>][<span class="number">33</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) dp[i][<span class="number">0</span>]=Height[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=N;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[i][j]=min(dp[i][j<span class="number">-1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ll=rak[l];</span><br><span class="line">	<span class="keyword">int</span> rr=rak[r];</span><br><span class="line">	<span class="keyword">if</span>(ll&gt;=rr)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(ll,rr);</span><br><span class="line">	&#125;</span><br><span class="line">	ll++;</span><br><span class="line">	<span class="keyword">int</span> k=log2(rr-ll+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">	<span class="keyword">return</span> min(dp[ll][k],dp[rr-len+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>)&amp;&amp;s[<span class="number">1</span>]!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		N=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		SuffixSort();</span><br><span class="line">		<span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">		GetHeight();</span><br><span class="line">		<span class="comment">//cout&lt;&lt;2&lt;&lt;endl;</span></span><br><span class="line">		RMQ_init();</span><br><span class="line">		<span class="comment">//cout&lt;&lt;3&lt;&lt;endl;</span></span><br><span class="line">		<span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+i&lt;=N;j+=i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> p=query(j,j+i);</span><br><span class="line">				<span class="keyword">int</span> k=j-(i-p%i);</span><br><span class="line">				<span class="keyword">int</span> ans=p/i+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">int</span> q=j;</span><br><span class="line">				<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> u=j<span class="number">-1</span>;u&gt;j-i&amp;&amp;s[u]==s[u+i]&amp;&amp;u&gt;=<span class="number">0</span>;u--)</span><br><span class="line">				&#123;</span><br><span class="line">					cnt++;</span><br><span class="line">					<span class="keyword">if</span>(cnt==(i-p%i))</span><br><span class="line">					&#123;</span><br><span class="line">						ans++;</span><br><span class="line">						q=u;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span>(rak[q]&gt;rak[u])</span><br><span class="line">					&#123;</span><br><span class="line">						q=u;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">				<span class="keyword">if</span>(ans&gt;mx)</span><br><span class="line">				&#123;</span><br><span class="line">					mx=ans;</span><br><span class="line">					pos=q;</span><br><span class="line">					len=i*ans;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(ans==mx)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(rak[pos]&gt;rak[q])</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="comment">//cout&lt;&lt;j&lt;&lt;&#x27; &#x27;&lt;&lt;u&lt;&lt;&#x27; &#x27;&lt;&lt;ans&lt;&lt;&#x27; &#x27;&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">						pos=q;</span><br><span class="line">						len=i*ans;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;pos&lt;&lt;&#x27; &#x27;&lt;&lt;len&lt;&lt;endl;</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>,T++);</span><br><span class="line">		<span class="keyword">if</span>(len==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">char</span> m=s[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//cout&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line">				m=min(m,s[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;pos+len;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/POJ-2774">Long Long Message</a><br>题意：求两个字符串的最长公共字串<br>思路：直接用上面问题二的结论，接在一起，然后暴力算都行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT() std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">4</span> * <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> rak[MAX_N];</span><br><span class="line"><span class="keyword">int</span> tp[MAX_N];</span><br><span class="line"><span class="keyword">int</span> sa[MAX_N];</span><br><span class="line"><span class="keyword">int</span> tax[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> M;</span><br><span class="line"><span class="keyword">int</span> height[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) tax[i]=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) tax[rak[i]]++;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++) tax[i]+=tax[i<span class="number">-1</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) sa[tax[rak[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   M=<span class="number">30</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      rak[i]=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">      tp[i]=i;</span><br><span class="line">   &#125;</span><br><span class="line">   Sort();</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;p&lt;N;M=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      p=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         tp[++p]=N-w+i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">if</span>(sa[i]&gt;w) tp[++p]=sa[i]-w;</span><br><span class="line">      &#125;</span><br><span class="line">      Sort();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         tp[i]=rak[i];</span><br><span class="line">      &#125;</span><br><span class="line">      rak[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         rak[sa[i]]=(tp[sa[i<span class="number">-1</span>]]==tp[sa[i]]&amp;&amp;tp[sa[i<span class="number">-1</span>]+w]==tp[sa[i]+w])?p:++p;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(k) k--;</span><br><span class="line">      <span class="keyword">int</span> j=sa[rak[i]<span class="number">-1</span>];</span><br><span class="line">      <span class="keyword">while</span>(i+k&lt;=N&amp;&amp;j+k&lt;=N&amp;&amp;s[i+k]==s[j+k]) k++;</span><br><span class="line">      height[rak[i]]=k;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s1[MAX_N];</span><br><span class="line"><span class="keyword">char</span> s2[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s1+<span class="number">1</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s2+<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">int</span> len1=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">int</span> len2=<span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(s1+len1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(s+<span class="number">1</span>,s1+<span class="number">1</span>);</span><br><span class="line">   N=len1+len2;</span><br><span class="line">   SuffixSort();</span><br><span class="line">   GetHeight();</span><br><span class="line">   <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//cout&lt;&lt;len1&lt;&lt;&#x27; &#x27;&lt;&lt;len2&lt;&lt;endl;</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=len1+<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">int</span> j=rak[i]<span class="number">-1</span>;</span><br><span class="line">      <span class="comment">//cout&lt;&lt;sa[j]&lt;&lt;endl;</span></span><br><span class="line">      <span class="keyword">if</span>(sa[j]&lt;=len1)</span><br><span class="line">      &#123;</span><br><span class="line">         ans=max(ans,min(len1-sa[j]+<span class="number">1</span>,height[rak[i]]));</span><br><span class="line">         <span class="comment">//cout&lt;&lt;len1-sa[j]+1&lt;&lt;&#x27; &#x27;&lt;&lt;height[rak[i]]&lt;&lt;endl;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len1;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">int</span> j=rak[i]<span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">if</span>(sa[j]&gt;len1)</span><br><span class="line">      &#123;</span><br><span class="line">         ans=max(ans,height[rak[i]]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/POJ-1226">Substrings </a><br>题意：给多个字符串，求在所有字符串中都出现的最长子串长度。<br>思路：首先，自然是把所有字符串连起来，中间插上从未出现过的字符，然而，n最大到一百，也就是最多要插99个不一样的字符！，在以身试发后发现，当ascll码大到一定程度后就会是汉字，而汉字在转回ascll码时居然会变成负数，在re了无数回后，无奈将字符串改成整形，插数字。然后就是喜闻乐见的二分长度，check就是寻找连续的height超过mid并且里面包含了来自每个字符串的子串即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAX_N = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> sa[MAX_N], tp[MAX_N], rak[MAX_N], tax[MAX_N];</span><br><span class="line"><span class="keyword">int</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= M; i++)</span><br><span class="line">        tax[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        tax[rak[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">        tax[i] += tax[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        sa[tax[rak[tp[i]]]--] = tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    M = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rak[i] = s[i];</span><br><span class="line">        tp[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    Sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">1</span>, p = <span class="number">0</span>; p &lt; N; w &lt;&lt;= <span class="number">1</span>, M = p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tp[++p] = N - w + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt; w)</span><br><span class="line">                tp[++p] = sa[i] - w;</span><br><span class="line">        &#125;</span><br><span class="line">        Sort();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tp[i] = rak[i];</span><br><span class="line">        &#125;</span><br><span class="line">        rak[sa[<span class="number">1</span>]] = p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            rak[sa[i]] = (sa[i] + w &lt;= N &amp;&amp; sa[i - <span class="number">1</span>] + w &lt;= N &amp;&amp; tp[sa[i]] == tp[sa[i - <span class="number">1</span>]] &amp;&amp; tp[sa[i] + w] == tp[sa[i - <span class="number">1</span>] + w]) ? p : ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> height[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">210</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k)</span><br><span class="line">            k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[rak[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; s[i + k] == s[j + k])</span><br><span class="line">            k++;</span><br><span class="line">        height[rak[i]] = k;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;height[rak[i]]&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> le[MAX_N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line">    me(vis, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// cout &lt;&lt; mid &lt;&lt; &quot;-----&quot; &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; sa[i] &lt;&lt; &#x27; &#x27; &lt;&lt; sa[i - 1] &lt;&lt; &#x27; &#x27; &lt;&lt; sum &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (height[i] &gt;= mid)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (le[sa[i]] &gt;= <span class="number">1</span> &amp;&amp; le[sa[i]] &lt;= n &amp;&amp; vis[le[sa[i]]] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[le[sa[i]]] = <span class="number">1</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (le[sa[i - <span class="number">1</span>]] &gt;= <span class="number">1</span> &amp;&amp; le[sa[i - <span class="number">1</span>]] &lt;= n &amp;&amp; vis[le[sa[i - <span class="number">1</span>]]] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[le[sa[i - <span class="number">1</span>]]] = <span class="number">1</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (le[sa[i]] &gt;= <span class="number">1</span> &amp;&amp; le[sa[i]] &gt; n &amp;&amp; vis[le[sa[i]] - n] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[le[sa[i]] - n] = <span class="number">1</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (le[sa[i - <span class="number">1</span>]] &gt;= <span class="number">1</span> &amp;&amp; le[sa[i - <span class="number">1</span>]] &gt; n &amp;&amp; vis[le[sa[i - <span class="number">1</span>]] - n] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[le[sa[i - <span class="number">1</span>]] - n] = <span class="number">1</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            me(vis, <span class="number">0</span>);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c[i] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="keyword">int</span>)<span class="built_in">strlen</span>(c[<span class="number">1</span>]+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> op = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(c[i] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                le[pos] = i;</span><br><span class="line">                s[pos++] = c[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            s[pos++] = op++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(c[i] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                le[pos] = n + i;</span><br><span class="line">                s[pos++] = c[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            s[pos++] = op++;</span><br><span class="line">        &#125;</span><br><span class="line">        pos -= <span class="number">2</span>;</span><br><span class="line">        N = pos;</span><br><span class="line">        SuffixSort();</span><br><span class="line">        GetHeight();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (check(mid))</span><br><span class="line">            &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;mid&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; <span class="number">0</span>)</span><br><span class="line">            mid = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/POJ-2758">Checking the Text</a><br>题意：给一个字符串，每次可以做插入和查询操作，插入是在指定位置插字符串,查询是查询两指定下标开头的字符串的匹配长度。<br>思路：这题我能想的用后缀数组的方法就是每次插入的时候再重新排一次序，然后查询就可以O(1)查询height，但是复杂度显然还是过不去，所以后缀数组怎么做我不会！所以我就用哈希了嘿嘿，直接暴力过。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> me(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll MAX_N = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll MAX_M = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> ull base = <span class="number">123</span>;</span><br><span class="line">ull po[MAX_N];</span><br><span class="line">ull has[MAX_N];</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> p[MAX_N];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r=len-max(x,y)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((has[x+mid<span class="number">-1</span>]-has[x<span class="number">-1</span>]*po[mid]%mod+mod)%mod==(has[y+mid<span class="number">-1</span>]-has[y<span class="number">-1</span>]*po[mid]%mod+mod)%mod)</span><br><span class="line">        &#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mid=(l+r)&gt;&gt;<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    po[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        po[i] = po[i - <span class="number">1</span>] * base % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        has[i] = (has[i - <span class="number">1</span>] * base + s[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m=len;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x &gt; len)</span><br><span class="line">                x = len + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= x; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                s[i + <span class="number">1</span>] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            s[x] = op[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p[i]&gt;=x)</span><br><span class="line">                &#123;</span><br><span class="line">                    p[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            len++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                has[i] = (has[i - <span class="number">1</span>] * base + s[i]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;query(p[l],p[r])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>kuangbin题单里剩下些题思路都差不多，当然有些搞人心态的细节问题，仔细点就好，后缀数组就暂时告一段落，后缀自动机冲冲冲！</p>
<p>希望若干天后能看到我更后缀自动机。</p>
]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
</search>
